{"results": [{"check_id": "home.backend.semgrep_rules.node_sha1", "path": "/home/backend/downloaded_packages/npm/git-0.1.5/package/lib/git/loose_storage.js", "start": {"line": 124, "col": 14}, "end": {"line": 124, "col": 39}, "extra": {"message": "SHA1 is a a weak hash which is known to have collision. Use a strong hashing function.", "metavars": {"$X": {"start": {"line": 124, "col": 14, "offset": 3920}, "end": {"line": 124, "col": 20, "offset": 3926}, "abstract_content": "crypto", "unique_id": {"type": "id", "value": "crypto", "kind": "Global", "sid": 6}}}, "metadata": {"owasp": "A9: Using Components with Known Vulnerabilities", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"}, "severity": "WARNING", "is_ignored": false, "lines": "  var hash = crypto.createHash(\"sha1\");"}}, {"check_id": "home.backend.semgrep_rules.node_sha1", "path": "/home/backend/downloaded_packages/npm/git-0.1.5/package/lib/git/raw_object.js", "start": {"line": 18, "col": 14}, "end": {"line": 18, "col": 39}, "extra": {"message": "SHA1 is a a weak hash which is known to have collision. Use a strong hashing function.", "metavars": {"$X": {"start": {"line": 18, "col": 14, "offset": 839}, "end": {"line": 18, "col": 20, "offset": 845}, "abstract_content": "crypto", "unique_id": {"type": "id", "value": "crypto", "kind": "Global", "sid": 1}}}, "metadata": {"owasp": "A9: Using Components with Known Vulnerabilities", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"}, "severity": "WARNING", "is_ignored": false, "lines": "  var hash = crypto.createHash(\"sha1\");"}}, {"check_id": "home.backend.semgrep_rules.node_insecure_random_generator", "path": "/home/backend/downloaded_packages/npm/git-0.1.5/package/benchmarks/benchmark.js", "start": {"line": 10, "col": 77}, "end": {"line": 10, "col": 96}, "extra": {"message": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.", "metavars": {}, "metadata": {"owasp": "A9: Using Components with Known Vulnerabilities", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"}, "severity": "WARNING", "is_ignored": false, "lines": "  var filename = 'git_test' + new Date().getTime().toString() + Math.round((Math.random(100000) * 300)).toString();"}}], "errors": []}
